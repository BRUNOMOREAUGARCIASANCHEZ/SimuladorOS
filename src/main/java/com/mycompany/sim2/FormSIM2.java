package com.mycompany.sim2;


import com.mycompany.practicab.Form;
import com.mycompany.practicab.PracticaB;
import com.mycompany.sim1.Simulador_memoria;
import com.mycompany.sim3.FORM_SIM3;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author HP
 */
public class FormSIM2 extends javax.swing.JFrame {
    private Lienzo dibujo = new Lienzo();
    public DefaultTableModel modelo;
    /**
     * Creates new form Form
     */
    public FormSIM2() {
        initComponents();
        this.modelo=(DefaultTableModel)table.getModel();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        radioContigua = new javax.swing.JRadioButton();
        radioEnlazada = new javax.swing.JRadioButton();
        radioIndexada = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        combo = new javax.swing.JComboBox<>();
        eliminar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo Asignacion", "Tamano", "Bloque Inicial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        buttonGroup1.add(radioContigua);
        radioContigua.setLabel("ASIGNACION CONTIGUA");
        radioContigua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioContiguaActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioEnlazada);
        radioEnlazada.setLabel("LISTA ENLAZADA");

        buttonGroup1.add(radioIndexada);
        radioIndexada.setLabel("ASGNACION INDEXADA");
        radioIndexada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioIndexadaActionPerformed(evt);
            }
        });

        jButton1.setLabel("AGRAGAR ARCHIVO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ROJO", "AMARILLO", "CYAN", "NARANJA", "ROSA", "VERDE" }));
        combo.setName("COLOR"); // NOI18N
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        eliminar.setText("ELIMINAR ARCHIVO");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jMenu2.setText("MENU");

        jMenuItem1.setText("MENU SIMULADOR MEMORIA");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("MENU LRU-FIFO");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("MENU ASIGNACION DISCO");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("SALIR");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(521, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioEnlazada)
                            .addComponent(radioContigua)
                            .addComponent(radioIndexada)
                            .addComponent(jButton1)
                            .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eliminar))
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(radioContigua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioEnlazada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioIndexada)
                .addGap(8, 8, 8)
                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(eliminar)
                .addGap(103, 103, 103))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioIndexadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioIndexadaActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_radioIndexadaActionPerformed

    private void radioContiguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioContiguaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioContiguaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String nombre,asignacion,tam,bloqueInicial,bloqueFinal;
        ArrayList<Integer> listaBloque=new ArrayList<Integer>();
        bloque b,sigB;
        int red=0,green=0,blue=0;  //CONTADOR
        boolean flag=true;
        nombre=JOptionPane.showInputDialog("Ingrese el nombre del archivo");
        
        if(combo.getSelectedIndex()==0){
            red=255;
            green=50;
            blue=50;
        }
        if(combo.getSelectedIndex()==1){
            red=255;
            green=255;
            blue=70;
        }
        if(combo.getSelectedIndex()==2){
            red=0;
            green=255;
            blue=255;
        }
        if(combo.getSelectedIndex()==3){
            red=255;
            green=120;
            blue=30;
        }
        if(combo.getSelectedIndex()==4){
            red=254;
            green=91;
            blue=200;
        }
        if(combo.getSelectedIndex()==5){
            red=0;
            green=255;
            blue=50;
        }
            
        
        if(radioContigua.isSelected()){
            
            tam=JOptionPane.showInputDialog("Ingrese el tamano (en bloques) del archivo");    
            bloqueInicial=JOptionPane.showInputDialog("Ingrese el bloque inicial");
            //COMPROBAR SI HAY ESPACIO
           for(int i=Integer.parseInt(bloqueInicial);i<Integer.parseInt(tam)+Integer.parseInt(bloqueInicial);i++){
               if(dibujo.bloques.get(i).isOcupado())
                   flag=false;
            }
           
            if(flag){
                dibujo.agregarArchivo(nombre, 1,Integer.parseInt(tam), Integer.parseInt(bloqueInicial));
                for(int i=Integer.parseInt(bloqueInicial);i<Integer.parseInt(tam)+Integer.parseInt(bloqueInicial);i++){
                    dibujo.bloques.get(i).setOcupado(true);      
                    dibujo.bloques.get(i).setColor(red, green, blue);
                }
            }else
                JOptionPane.showMessageDialog(rootPane, "BLOQUES OCUPADOS", "ERROR DE MEMORIA", JOptionPane.ERROR_MESSAGE, null);
                System.out.println("BLOQUES OCUPADOS");
        }
        
        if(radioEnlazada.isSelected()){
            bloqueInicial=JOptionPane.showInputDialog("Ingrese el bloque inicial");
            bloqueFinal=JOptionPane.showInputDialog("Ingrese el bloque final");
            
            
            do{
                asignacion=JOptionPane.showInputDialog("Ingrese el siguiente bloque");
                listaBloque.add(Integer.parseInt(asignacion));
                if(dibujo.bloques.get(Integer.parseInt(asignacion)).isOcupado())
                    flag=false;
            }while(!asignacion.equals(bloqueFinal));
            
            if(flag){
                dibujo.agregarArchivo(nombre, 2,listaBloque.size()+1, Integer.parseInt(bloqueInicial));
                for(int x:listaBloque){
                    dibujo.bloques.get(x).setOcupado(true);
                    dibujo.bloques.get(x).setColor(red, green, blue);
                }
                //ENLAZAR BLOQUES
                b=dibujo.bloques.get(listaBloque.get(0));
                dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setEnlace(b);
                for(int i=1;i<listaBloque.size();i++){
                    sigB=dibujo.bloques.get(listaBloque.get(i));
                    b.setEnlace(sigB);
                    b=sigB;
                }
                dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setOcupado(true);
                dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setColor(red, green, blue);
            }else
                JOptionPane.showMessageDialog(rootPane, "BLOQUES OCUPADOS", "ERROR DE MEMORIA", JOptionPane.ERROR_MESSAGE, null);
                System.out.println("BLOQUES OCUPADOS");    
        }
        
        if(radioIndexada.isSelected()){
            bloqueInicial=JOptionPane.showInputDialog("Ingrese el bloque inicial");
            //tam=JOptionPane.showInputDialog("Ingrese el tamano (en bloques) del archivo");  
            asignacion=JOptionPane.showInputDialog("Ingrese los bloques del archivo separados por espacios");
            
            String[] cadRef=asignacion.split(" ");
            int[] cadR=new int[cadRef.length];
            for(int i=0; i<cadRef.length; i++)
                cadR[i]=Integer.parseInt(cadRef[i]);
            
            for(int i=0;i<cadR.length;i++){
                if(dibujo.bloques.get(cadR[i]).isOcupado())
                    flag=false;
            }
            
            if(flag){
                dibujo.agregarArchivo(nombre, 3,cadRef.length+1, Integer.parseInt(bloqueInicial));
                for(int i=0;i<cadR.length;i++){
                    dibujo.bloques.get(cadR[i]).setOcupado(true);
                    dibujo.bloques.get(cadR[i]).setColor(red, green, blue);
                    dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setEnlace(dibujo.bloques.get(cadR[i]));
                }
                dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setOcupado(true);
                dibujo.bloques.get(Integer.parseInt(bloqueInicial)).setColor(red, green, blue);
                //dibujo.bloques.get(Integer.parseInt(bloqueInicial)).
            }else{
                JOptionPane.showMessageDialog(rootPane, "BLOQUES OCUPADOS", "ERROR DE MEMORIA", JOptionPane.ERROR_MESSAGE, null);
                System.out.println("BLOQUES OCUPADOS");
            }
                
        }
        
        llenarTabla();
        dibujo.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        int[] fileIndex=table.getSelectedRows();
        System.out.println(fileIndex.length);
        archivo a;
        bloque inicial,siguiente;
        //ELIMINAR ARCHIVO
        for(int i=fileIndex.length;i>0;i--){
            //REINICIAR BLOQUES
            a=dibujo.hd.get(fileIndex[i-1]);
            inicial=a.getPrimerBloque();
            
            if(a.getTipoAsignacion()==1){
                for(int j=0;j<a.getTam();j++){
                    dibujo.bloques.get(j+inicial.No).reset();
                }
            }
            if(a.getTipoAsignacion()==2){
                siguiente=inicial;
                do{
                    if(!inicial.getEnlace().isEmpty())
                        siguiente=inicial.getEnlace().get(0);
                    inicial.reset();
                    inicial=siguiente;
                }while(!inicial.getEnlace().isEmpty());
                inicial.reset();
                
            }
            if(a.getTipoAsignacion()==3){
                for(bloque b:inicial.getEnlace()){
                    b.reset();
                }
                inicial.reset();
            }
            
            dibujo.hd.remove(fileIndex[i-1]);
        }
        llenarTabla();
        dibujo.repaint();
        
    }//GEN-LAST:event_eliminarActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        PracticaB aux=new PracticaB();
                aux.interfaz.setVisible(true);
                this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Simulador_memoria lruMenu=new Simulador_memoria();
                lruMenu.setVisible(true);
                //frame.dispose();
                dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        FORM_SIM3 menu=new FORM_SIM3();
                menu.setVisible(true);
                this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormSIM2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormSIM2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormSIM2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormSIM2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormSIM2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioContigua;
    private javax.swing.JRadioButton radioEnlazada;
    private javax.swing.JRadioButton radioIndexada;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void prueba(){
        this.dibujo.repaint();
    }
    
    public void inicializar(){
        dibujo.setMemoria();
        dibujo.Dibujar();
        add(dibujo);
    }
    
    public void llenarTabla(){
        modelo.setRowCount(0);
        String tipo="";
        for(archivo a:dibujo.hd){
            
            if(a.getTipoAsignacion()==1)
                tipo="CONTIGUA";
            if(a.getTipoAsignacion()==2)
                tipo="ENLAZADA";
            if(a.getTipoAsignacion()==3)
                tipo="INDEXADA";
            
            modelo.addRow(new Object[]{ a.getNombre(), tipo, " "+a.getTam(), ""+a.getPrimerBloque().No});
        }
        
        modelo.addRow(new Object[]{});
    }
    
    
    
}
